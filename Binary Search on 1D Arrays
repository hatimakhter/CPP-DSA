/* 
// QsNo 1 : Binary Search (704. Leetcode)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0, high = n-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] == target) return mid;
            else if(target > nums[mid]) low = mid + 1;
            else high = mid-1;
        }
        return -1;
    }
};
*/


/*
// QsNo 2 :  Ceil The Floor (codingNinjas) 
pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
	int low = 0, high = n-1;
	int floor = -1, ceil = -1;
	while(low <= high){
		// int mid = (low + high)/2;
		int mid = low + (high -low)/2;
		if(a[mid] == x) return {x,x};
		else if (a[mid] < x){
			low = mid + 1;
			floor = mid;
		}
		else{
			high = mid - 1;
			ceil = mid;
		}
	}
	if(floor == -1) return {-1, a[ceil]};
	
	else if(ceil == -1) return {a[floor],-1};
	
	return {a[floor], a[ceil]};
} 
*/


/*
// QsNo 3 : Find First and Last Position of Element in Sorted Array (34. Leetcode) 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int first = -1, last =-1;
        int low = 0, high = n-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] == target){
                first = mid;
                high = mid - 1;
            }
            else if(nums[mid] < target) low = mid + 1;
            else high = mid - 1; 
        }
        
        low = 0, high = n-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] == target){
                last = mid;
                low = mid + 1;
            }
            else if(nums[mid] < target) low = mid + 1;
            else high = mid - 1;
        }
        return {first, last};
    }
};
*/


/*
// QsNo 4 : Number of occurrence (GeeksforGeeks)
class Solution {
  public:
    int countFreq(vector<int>& arr, int target) {
        int n = arr.size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(arr[i] == target) cnt++;
            
        }
        return cnt;
    }
};
*/


/*
// QsNo 5: Search in Rotated Sorted Array  (33. Leetcode)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n-1;
        while(left <= right){
            int mid = (left + right)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] >= nums[left]){
                if(nums[left] <= target && target <= nums[mid]){
                    right = mid - 1;
                } else left = mid + 1;
            } else {
                if(nums[mid] <= target && target <= nums[right]){
                    left = mid + 1;
                }
                else right = mid -1;
            }

            
        } 
        return -1;
        
    }
};
*/

/*
//QsNo 6: Find Kth Rotation (GeeksforGeeks)
class Solution {
  public:
    int findKRotation(vector<int> &arr) {
        int n = arr.size();
        int left = 0, right = n-1;
        int ans = INT_MAX;
        int idx = -1;
        
        while(left <= right){
            int mid = (left + right)/2;
            if(arr[left] <= arr[right]){
                if(arr[left] < ans){
                    ans = arr[left];
                    idx = left;
                }
                break;
            }
            if(arr[left] <= arr[mid]){
                if(arr[left] < ans){
                    ans = arr[left];
                    idx = left;
                }
                left = mid + 1;
            }
            else {
                if(arr[mid] < ans){
                    ans = arr[mid];
                    idx = mid;
                }
                right = mid - 1;
            }
        }
        return idx;
    }
};
*/



/*
// QsNo : 7 Single Element in a Sorted Array (504. leetcode)
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[n-1] != nums[n-2]) return nums[n-1];
        int low = 1, high = n-2;
        
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]){
                return nums[mid];
            }
            if(mid%2==1 && nums[mid]==nums[mid-1] || mid%2==0 && nums[mid]==nums[mid+1]){
                low = mid + 1;
            }
            else high = mid -1;
        }
        return -1;
    }
};
*/
